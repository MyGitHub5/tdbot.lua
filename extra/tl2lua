#!/bin/bash

# __if it's ugly but it's works, then "it's ugly but it's works!"__

# WHAT
# Script to create a tdbot.lua basic structure from Telegram library file
#
# HOW
# - Get td_api.tl file from tdlib's repo:
#   https://github.com/tdlib/td/blob/master/td/generate/scheme/td_api.tl
# - Put this script and tl file(s) in a same directory
# - Run this script, e.g by execute this command: ./tl2lua
# - Lua file(s) with similar name to tl file(s) will then be generated

HEADER="--[[
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  MA 02110-1301, USA.
--]]

local tdbot = {}

-- Does nothing, suppress 'lua: attempt to call a nil value' warning
function dl_cb(arg, data)
end

-- Type of chats:
-- @chat_id = users, basic groups, supergroups, channels and secret chats
-- @basicgroup_id = basic groups
-- @supergroup_id = supergroups and channels
local function getChatId(chat_id)
  local chat = {}
  local chat_id = tostring(chat_id)

  if chat_id:match('^-100') then
    local supergroup_id = string.sub(chat_id, 5)
    chat = {id = supergroup_id, type = 'supergroup'}
  else
    local basicgroup_id = string.sub(chat_id, 2)
    chat = {id = basicgroup_id, type = 'basicgroup'}
  end

  return chat
end

-- Get points to a file
local function getInputFile(file, conversion_str, expected_size)
  local input = tostring(file)
  local infile = {}

  if (conversion_str and expectedsize) then
    infile = {
      [\"@type\"] = 'inputFileGenerated',
      original_path = tostring(file),
      conversion = tostring(conversion_str),
      expected_size = expected_size
    }
  else
    if input:match('/') then
      infile = {[\"@type\"] = 'inputFileLocal', path = file}
    elseif input:match('^%d+$') then
      infile = {[\"@type\"] = 'inputFileId', id = file}
    else
      infile = {[\"@type\"] = 'inputFileRemote', id = file}
    end
  end

  return infile
end

tdbot.getInputFile = getInputFile

-- Get the way the text should be parsed for TextEntities
local function getParseMode(parse_mode)
  local P = {}
  if parse_mode then
    local mode = parse_mode:lower()

    if mode == 'markdown' or mode == 'md' then
      P[\"@type\"] = 'textParseModeMarkdown'
    elseif mode == 'html' then
      P[\"@type\"] = 'textParseModeHTML'
    end
  end
  return P
end

-- Parses Bold, Italic, Code, Pre, PreCode and TextUrl entities contained in the text.
-- This is an offline method.
-- May be called before authorization.
-- Can be called synchronously
-- @text The text which should be parsed
-- @parse_mode Text parse mode
local function parseTextEntities(text, parse_mode, callback, data)
  assert (tdbot_function ({
    [\"@type\"] = 'parseTextEntities',
    text = tostring(text),
    parse_mode = getParseMode(parse_mode)
  }, callback or dl_cb, data))
end

tdbot.parseTextEntities = parseTextEntities

-- Sends a message.
-- Returns the sent message
-- @chat_id Target chat
-- @reply_to_message_id Identifier of the message to reply to or 0
-- @disable_notification Pass true to disable notification for the message. Not supported in secret chats
-- @from_background Pass true if the message is sent from the background
-- @reply_markup Markup for replying to the message; for bots only
-- @input_message_content The content of the message to be sent
local function sendMessage(chat_id, reply_to_message_id, input_message_content, parse_mode, disable_notification, from_background, reply_markup, callback, data)
  local tdbody = {
    [\"@type\"] = 'sendMessage',
    chat_id = chat_id,
    reply_to_message_id = reply_to_message_id or 0,
    disable_notification = disable_notification or 0,
    from_background = from_background or 1,
    reply_markup = reply_markup,
    input_message_content = input_message_content
  }
  local text

  if input_message_content.text then
    text = input_message_content.text.text
  elseif input_message_content.caption then
    text = input_message_content.caption.text
  end

  if text then
    if parse_mode then
      parseTextEntities(text, parse_mode, function(a, d)
        if a.tdbody.input_message_content.text then
          a.tdbody.input_message_content.text = d
        else
          a.tdbody.input_message_content.caption = d
        end
        assert (tdbot_function (a.tdbody, a.callback or dl_cb, a.data))
      end, {tdbody = tdbody, callback = callback, data = data})
    else
      local message = {}
      local n = 1
      -- Send multiple messages if text is longer than 4096 characters.
      -- https://core.telegram.org/method/messages.sendMessage
      while #text > 4096 do
        message[n] = text:sub(1, 4096)
        text = text:sub(4096, #text)
        n = n + 1
      end
      message[n] = text

      for i = 1, #message do
        tdbody.reply_to_message_id = i > 1 and 0 or reply_to_message_id
        if input_message_content.text and input_message_content.text.text then
          tdbody.input_message_content.text.text = message[i]
        else
          tdbody.input_message_content.caption.text = message[i]
        end
        assert (tdbot_function (tdbody, callback or dl_cb, data))
      end
    end
  else
    assert (tdbot_function (tdbody, callback or dl_cb, data))
  end
end

tdbot.sendMessage = sendMessage

-- Set limit.
local function setLimit(limit, num)
  local limit = tonumber(limit)
  local number = tonumber(num or limit)

  return (number >= limit) and limit or number
end


-- (Temporary) workaround for currently buggy tdbot's vector
-- This will return lua array from strings:
-- - {one, two, three}
-- - {[0] = one, two, three}
-- - {[0] = one, [1] = two, [2] = three}
local function vectorize(str)
  local v = {}
  local i = 1

  if not str then return v end

  for k in string.gmatch(str, '(-?%d+)') do
    v[i] = '[' .. i-1 .. ']=\"' .. k .. '\"'
    i = i+1
  end
  v = table.concat(v, ',')
  return load('return {' .. v .. '}')()
end"

while read -r tl; do
  # output filename
  tdbot="${tl%.*}.lua"

  # get lines after '---functions---' until the end of the file
  awk 'NR == 1, $0 ~ /---functions---/ {next}; {print}' "$tl" > "$tdbot"

  # characters substitutions
  awk -i inplace '{
    gsub(/ @/, "\n-- @")
    gsub(/^\/\/@description/, "--")
    gsub(/^\/\/@/, "-- @")
    gsub(/\. /, ".\n-- ")
  };1' "$tdbot"

  awk -i inplace '/^[[:alpha:]]/{
    gsub(/ = .*;/, "")
    print "-- function tdbot."$0
  };1' "$tdbot"

  # insert strings at 4th field and last field
  awk -i inplace '/^-- function/{
    $3=$3"("; $NF=$NF", callback, data)\n  assert (tdbot_function ({"
  };1' "$tdbot"

  # characters substitutions
  awk -i inplace '/^[[:alpha:]]/{
    $0=$0"\n  }, callback or dl_cb, data))\nend\n\n"
  };1' "$tdbot"

  # split one variable per line and then replace colon (:) by equal (=) char
  awk -i inplace '/^[[:alpha:]][[:alpha:]]/{
    gsub(/ /, ",\n")
    gsub(/:/, "= ")
  };1' "$tdbot"

  # set variables value and indent by 4 spaces
  awk -F= -i inplace '/[[:alpha:]]= [[:alpha:]]/{
    gsub(/ string/, "= tostring("$1")", $2)
    gsub(/ vector.+>/, "= vectorize("$1")", $2)
    gsub(/ InputFile/, "= getInputFile("$1")", $2)
    gsub(/ ReplyMarkup/, "= reply_markup", $2)
    gsub(/ InputMessageContent/, "= input_message_content", $2)
    gsub(/ location/, "= {[\"@type\"] = '\''location'\'',latitude = latitude,longitude = longitude}", $2)
    gsub(/ (int[[:digit:]][[:digit:]]|bytes|Bool|double)/, "= "$1, $2)
    $0="    "$0
  };1' "$tdbot"

  awk -i inplace '/^[[:alpha:]][[:alpha:]]/{
    $1="    [\"@type\"] = '\''"$1"'\''"
  };1' "$tdbot"

  awk -i inplace '{
    gsub(/^-- function/, "function")
    gsub(/    \["@type"\] = '\''end'\''/, "end")
    gsub(/,'\''/, "'\'',")
    gsub(/\( /, "(")
    gsub(/^\/\/-/, "-- ")
  };1' "$tdbot"

  awk -i inplace '/^function/{
    gsub(/\(, /, "(")
    gsub(/:[^ ]* /, ", ")
  };1' "$tdbot"

  # reduce multiple empty lines into one
  awk -i inplace 'BEGIN{
    bl=0
  }/^$/{
    bl++
    if(bl==1)print
    else next
  }/^..*$/{
    bl=0
    print
  }' "$tdbot"

  # insert license and some functions to the beginning of the script
  awk -i inplace -v var="$HEADER" 'BEGINFILE{print var}{print}' "$tdbot"

  # insert functions return at the end of the script
  echo 'return tdbot' >> "$tdbot"

  # notify user if conversion has been finished
  printf '%s\n' " -- $tdbot has been successfully created."
done < <(find . -type f -iname "*.tl")
